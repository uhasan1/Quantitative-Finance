a = pd.DataFrame({'Company': ['ABC CO LTD', 'DEF CO', 'XYZ INC']})
b = pd.DataFrame({'LONG': ['CORPORATION', 'COMPANY'], 'SHORT': ['CO LTD', 'CO']})

for string in b.values.tolist():
    a['Company'] = [re.sub(r'\b%s\b' % string[1], string[0], company) for company in a['Company']]

# print(df.tail()) to inspect the entries
# https://engineering.upside.com/a-beginners-guide-to-optimizing-pandas-code-for-speed-c09ef2c6a4d6
# https://maxpowerwastaken.github.io/blog/pandas-dont-apply-_-vectorize/


# to remove any spaces for the checks: sample_string[7].replace(' ', '')
# replace iterable with .str.replace: df_trics_remit['REMITTER_ENGLISH_NEW'] = [re.sub(r'\b%s\b' % 'AND', '', row) for row in df_trics_remit['REMITTER_ENGLISH_NEW']]

a = pd.DataFrame({'Company': ['ABC CO LTD', 'DEF CO', 'XYZ INC']})
b = pd.DataFrame({'SHORT': ['CO LTD', 'CO'], 'LONG': ['COMPANY LIMITED', 'COMPANY']})
start = time.time() # Indicate start of timer
def replacer(row):
    for abb in b.values.tolist():
        if abb[0] in row:
            print(re.sub(r'\b%s\b' % abb[0], abb[1], row))
            return re.sub(r'\b%s\b' % abb[0], abb[1], row)
#        else:
#            return row
    
a['Company_New'] = a['Company'].apply(replacer)

a = pd.DataFrame({'Company': ['ABC CO LTD', 'DEF CO', 'XYZ INC']})
b = pd.DataFrame({'SHORT': ['CO LTD', 'CO'], 'LONG': ['COMPANY LIMITED', 'COMPANY']})
arr_1 = {'Company_New' : []}
def replacer(series):
    arr = series.values.tolist()
    for abb in b.values.tolist():
        arr = series.values.tolist()
        for ele in arr:
            if abb[0] in ele:
                arr = re.sub(r'\b%s\b' % abb[0], abb[1], arr[%s])
#            arr = re.sub(r'\b%s\b' % abb[0], abb[1], arr)
#        else:
    
replacer(a['Company'])
