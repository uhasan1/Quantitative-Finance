def LevRatio(df1, df2, fun):
    # Drop all duplicates in df1
    df1.drop_duplicates(TRICS_combined_columns[0], inplace = True)
    # Initialize df2
    df_match = pd.DataFrame({'TRICS_COMPANY': [], 'GDWH_COMPANY': [], 'RATIO': []})
    df_match['GDWH_COMPANY'] = df2[GDWH_combined_columns[3]]
    for row in df1.itertuples():
        df_match['TRICS_COMPANY'] = np.tile(row[2], (len(df2),1)) 
        df_match['RATIO'] = df_match['RATIO'].apply(lambda x: get_closest_match(x['TRICS_COMPANY'], x['GDWH_COMPANY'], fun), axis = 1)
        df_match['GDWH_COMPANY'][df_match['RATIO'] == max(df_match['RATIO'])] 
        # create temp dataframe and include conditions during matching if necessary

import datetime ## SHIFT TO TOP OF PYTHON LIBRARIES
datetime.datetime.now().strftime("%Y%m%d")

# Initialize DataFrame for complex fuzzy matching
    count = 0
    df_match = pd.DataFrame({'TRICS_COMPANY_CO': [], 'GDWH_COMPANY_CO': [], 'GDWH_COMPANY': [], 'GDWH_CCIF': [], 'RATIO': []})
    # Start complex fuzzy matching
    for row in df_fuzzy_match.itertuples():
        orig_company_match = df_customers[GDWH_combined_columns[0]][df_customers[GDWH_combined_columns[3]].str.replace(' ', '').str.find(r'\b%s\b' % ''.join(row[2].split()[0:2])) >= 0].tolist()
        rev_company_match = df_customers[GDWH_combined_columns[3]][df_customers[GDWH_combined_columns[3]].str.replace(' ', '').str.find(r'\b%s\b' % ''.join(row[2].split()[0:2])) >= 0].tolist()
        orig_ccif_match = df_customers[GDWH_columns[1]][df_customers[GDWH_combined_columns[3]].str.replace(' ', '').str.find(''.join(row[2].split()[0:2])) >= 0].tolist()
        if len(orig_company_match) != 0:
            df_match['GDWH_COMPANY_CO'] = rev_company_match
            df_match['GDWH_COMPANY'] = orig_company_match
            df_match['GDWH_CCIF'] = orig_ccif_match
            df_match['TRICS_COMPANY_CO'] = np.tile(row[2], (len(orig_company_match),1)) 
            df_match['RATIO'] = df_match.apply(lambda x: get_closest_match(x['TRICS_COMPANY_CO'], x['GDWH_COMPANY_CO'], ratio), axis = 1)
            if max(df_match['RATIO']) != 0:
                df_fuzzy_match['COMPANY_BEST_MATCH'][df_fuzzy_match[TRICS_combined_columns[3]] == row[2]] = df_match['GDWH_COMPANY'][df_match['RATIO'] == max(df_match['RATIO'])].iloc[0]
                df_fuzzy_match['CCIF_BEST_MATCH'][df_fuzzy_match[TRICS_combined_columns[3]] == row[2]] = df_match['GDWH_CCIF'][df_match['RATIO'] == max(df_match['RATIO'])].iloc[0]
                df_fuzzy_match['HIGHEST_RATIO'][df_fuzzy_match[TRICS_combined_columns[3]] == row[2]] = max(df_match['RATIO'])
                df_fuzzy_match['UPDATE_TAG'][df_fuzzy_match[TRICS_combined_columns[3]] == row[2]] = 'Y'
        # Track progress of fuzzy matching
        count += 1
        if count % 1000 == 0:
            print('Progress: %d out of %d' % (count, len(df_fuzzy_match)))
        #### CHECK TIME AND REPLACE THOSE NULL VALUES in N ####
            df_fuzzy_match['COMPANY_BEST_MATCH'][df_fuzzy_match[TRICS_combined_columns[3]] == row[2]] = ''
            df_fuzzy_match['CCIF_BEST_MATCH'][df_fuzzy_match[TRICS_combined_columns[3]] == row[2]] = ''
            df_fuzzy_match['HIGHEST_RATIO'][df_fuzzy_match[TRICS_combined_columns[3]] == row[2]] = 0
            df_fuzzy_match['UPDATE_TAG'][df_fuzzy_match[TRICS_combined_columns[3]] == row[2]] = 'N'
    print('Complex fuzzy matching completed!')   
    
    def get_closest_match(sample_string, current_string, fun):
    # Initialize variables
    current_score = 0
    # Compare sample_string with current_string in actual customer list
    if ([ccc for ccc in df_ccc['ENTITIES'] if ccc in sample_string] \
         == [ccc for ccc in df_ccc['ENTITIES'] if ccc in current_string]) and \
         len([ccc for ccc in df_ccc['ENTITIES'] if ccc in sample_string]) >= 1 and \
         len([ccc for ccc in df_ccc['ENTITIES'] if ccc in current_string]) >= 1:
        current_score = fun(sample_string, current_string)
                    
    elif len([ccc for ccc in df_ccc['ENTITIES'] if ccc in sample_string]) == 0 and \
        len([ccc for ccc in df_ccc['ENTITIES'] if ccc in current_string]) == 0:
        current_score = fun(sample_string, current_string)   
    return current_score
    
    
