## https://docs.microsoft.com/en-us/dotnet/api/system.data.datatable?view=netframework-4.7.2
using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Text;
using System.Data;

namespace CSVFileParser
{
    public class HanoiFX
    {
        static void Main(string[] args)
        {
            string FilePath = @"H:\Clement\Cat1B\"; // Update Directory
            try
            {
                // Import the CSV file
                DataTable HanoiFXData = ImportCSV(FilePath);

                // Update job status after CSV import
                string importSuccess = "Runtime: " + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + " Status: File is imported successfully.";
                SuccessLog(FilePath, importSuccess);
                
                // Create Devon Table based on cost rate
                DataTable DevonTable = CreateDevonTable(HanoiFXData);
                InspectData(DevonTable);
            }

            catch (Exception e)
            {
                // Update job status for errors
                string importError = "Runtime: " + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + " Status: " + e.Message;
                ErrorLog(FilePath, importError);
            }
            Console.ReadLine();
        }

        static DataTable ImportCSV(string FilePath)
        {
            // Import the file and display the contents
            DataTable table = new DataTable();
            using (StreamReader file = new StreamReader(FilePath + "Hanoi_FX.csv")) 
            {
                // Separate column headers using pipe delimiter
                string[] headers = file.ReadLine().Split('|');

                foreach (string header in headers)
                {
                    table.Columns.Add(header);
                }

                while (!file.EndOfStream)
                {
                    // Separate column data using pipe delimiter
                    string[] rows = file.ReadLine().Split('|');
                    DataRow row = table.NewRow();

                    for (int i = 0; i < headers.Length; i++)
                    {
                        row[i] = rows[i];
                    }
                    table.Rows.Add(row);
                }
            }
            return table;
        }

        private static DataTable CreateDevonTable(DataTable Source)
        {
            // Create a new DataTable - Cost Rate
            DataTable table = new DataTable("DevonTable");

            // Define new DataColumns, DataTypes and ColumnNames
            DataColumn[] cols = 
                {
                new DataColumn("UploadFlag",                typeof(Int32)),
                new DataColumn("Code",                      typeof(String)),
                new DataColumn("SourceData",                typeof(Int32)),
                new DataColumn("DealerID",                  typeof(String)),
                new DataColumn("Bank1DealingCode",          typeof(String)),
                new DataColumn("BrokerDealingCode",         typeof(String)),
                new DataColumn("DealType",                  typeof(Int32)),
                new DataColumn("Currency1",                 typeof(String)),
                new DataColumn("DealVolumeCurrency1",       typeof(Double)),
                new DataColumn("ValueDatePeriod1Currency1", typeof(DateTime)),
                new DataColumn("LocalTCID",                 typeof(String)),
                new DataColumn("TradingArea",               typeof(String)),
                new DataColumn("UserDefinedData1",          typeof(String)),
                new DataColumn("UserDefinedData5",          typeof(String)),
                new DataColumn("Currency2",                 typeof(String)),
                new DataColumn("ExchangeRatePeriod1",       typeof(Double)),
                new DataColumn("RateDirection ",            typeof(Int32))
                };

            // Add DataColumns to DataTable
            table.Columns.AddRange(cols);
            
            // Create DataRows based on data imported from CSV
            foreach (DataRow srcrow in Source.Rows)
            {
                DataRow row = table.NewRow();

                // (1)  UploadFlag 
                row["UploadFlag"] = 0;

                // (2)  Code
                //row["Code"] = 

                // (3)  SourceData 
                row["SourceData"] = 1;

                // (4)  DealerID
                row["DealerID"] = "tasaiyu1";

                // (5)  Bank1DealingCode
                //row["Bank1DealingCode"] = 

                // (6)  BrokerDealingCode 
                row["BrokerDealingCode"] = "DUMMYBR";

                // (7)  DealType
                if (srcrow["BUY_SELL_FLAG"].ToString().Contains("B"))
                {
                    row["DealType"] = 1;
                }
                else if (srcrow["BUY_SELL_FLAG"].ToString().Contains("S"))
                {
                    row["DealType"] = 2;
                }

                // (8)  Currency1


                // (9)  DealVolumeCurrency1

                // (10) ValueDatePeriod1Currency1  

                // (11) LocalTCID 
                row["LocalTCID"] = "MHCBSPO";

                // (12) TradingArea
                if (srcrow["BANK_FLAG"].ToString().Contains("Y"))
                {
                    row["TradingArea"] = "INTERBANK";
                }
                else if (srcrow["BANK_FLAG"].ToString().Contains("N"))
                {
                    row["TradingArea"] = "CUSTOMER";
                }

                // (13) UserDefinedData1
                row["UserDefinedData1"] = "C1BHAN1";

                // (14) userDefinedData5 
                row["UserDefinedData5"] = "DUMMY";

                // (15) Currency2

                // (16) ExchangeRatePeriod1 
                if (string.IsNullOrEmpty(srcrow["INTERNAL_RATE"].ToString()))
                {
                    row["ExchangeRatePeriod1"] = srcrow["EXCHANGE_RATE"];
                }
                else 
                {
                    row["ExchangeRatePeriod1"] = srcrow["INTERNAL_RATE"];
                }

                // (17) RateDirection 

                table.Rows.Add(row);

            }
            
            return table;
        }

        static void SuccessLog(string FilePath, string StatusMsg)
        {
            // Stores all successful status in log file 
            string FileName = String.Format(FilePath + "Success_{0}.txt", DateTime.Today.ToString("yyyyMMdd"));
            File.AppendAllText(FileName, StatusMsg.ToString() + Environment.NewLine);
        }

        static void ErrorLog(string FilePath, string StatusMsg)
        {
            // Stores all error status in log file 
            string FileName = String.Format(FilePath + "Error_{0}.txt", DateTime.Today.ToString("yyyyMMdd"));
            File.AppendAllText(FileName, StatusMsg.ToString() + Environment.NewLine);
        }

        static void InspectData(DataTable Table) // This can be invoked if we wish to check the relevant DataTable
        {
            foreach (DataRow row in Table.Rows)
            {
                foreach (var item in row.ItemArray)
                {
                    Console.WriteLine(item);
                }
            }
        }

    }
}
