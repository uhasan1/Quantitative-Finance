using System;
using System.IO;
using System.Linq;
using System.Data;

namespace CSVFileParser
{
    public class HanoiFX
    {
        static void Main(string[] args)
        {
            string FilePath = @"H:\Clement\Cat1B\"; // Update Directory
            try
            {
                // Import Currency Pair CSV file
                DataTable CurrencyPair = ImportCSV(FilePath, "CURRENCY_PAIR.csv");

                // Import Hanoi FX transaction CSV file
                DataTable HanoiFXData = ImportCSV(FilePath, "HANOI_FX.csv");

                // Update job status after Hanoi FX transaction CSV import
                string importSuccess = "Runtime: " + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + " Status: File is imported successfully.";
                SuccessLog(FilePath, importSuccess);

                // Create Devon Table based on cost rate
                DataTable DevonTable = CreateDevonTable(HanoiFXData, CurrencyPair);
                InspectData(DevonTable);

                // Update job status after creation of Devon Table
                string convSuccess = "Runtime: " + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + " Status: File is converted successfully.";
                SuccessLog(FilePath, convSuccess);
            }

            catch (Exception e)
            {
                // Update nature of error if job abend
                string Error = "Runtime: " + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + " Status: " + e.Message;
                ErrorLog(FilePath, Error);
            }
            Console.ReadLine();
        }

        static DataTable ImportCSV(string FilePath, string FileName)
        {
            // Import the file and display the contents
            DataTable table = new DataTable();
            using (StreamReader file = new StreamReader(FilePath + FileName))
            {
                // Separate column headers using pipe delimiter
                string[] headers = file.ReadLine().Split('|');

                foreach (string header in headers)
                {
                    table.Columns.Add(header);
                }

                while (!file.EndOfStream)
                {
                    // Separate column data using pipe delimiter
                    string[] rows = file.ReadLine().Split('|');
                    DataRow row = table.NewRow();

                    for (int i = 0; i < headers.Length; i++)
                    {                    
                        row[i] = rows[i]; 
                    }

                    if (FileName.Contains("CURRENCY_PAIR"))
                    {
                        // Add DataRow to DataTable
                        table.Rows.Add(row);
                    }

                    else if (FileName.Contains("HANOI_FX"))
                        // Parse VALUE_DATE (column number = 53) in YYYYMMDD format
                        row[53] = DateTime.Parse((rows[53].ToString())).ToString("yyyyMMdd");

                        // Include only FX transactions that are approved by Back Office and/or Treasury
                        // Use STATUS (column number = 3), INTIATIOR_USER_GROUP (column number = 1) and DIRECT_DEAL_FLAG (column number = 7)
                        if (row[3].ToString().Contains("99") ||

                            row[3].ToString().Contains("98") ||

                            (new[] { "07", "13", "14", "15", "16", "17", "18", "19", "96"}.Any(row[3].ToString().Contains)
                            && row[1].ToString().Contains("03")
                            && row[7].ToString().Contains("Y")) ||

                            (new[] { "06", "10", "11"}.Any(row[3].ToString().Contains) &&
                            (row[7].ToString().Contains("N") || ((!row[1].ToString().Contains("03")) && row[7].ToString().Contains("Y"))))
                            )
                        {
                            // Add DataRow to DataTable
                            table.Rows.Add(row);
                        }
                }
            }
            return table;
        }

        private static DataTable CreateDevonTable(DataTable Source, DataTable CCYPair)
        {
            // Create a new DataTable - Cost Rate
            DataTable table = new DataTable("DevonTable");

            // Define new DataColumns, DataTypes and ColumnNames
            DataColumn[] cols =
                {
                new DataColumn("UploadFlag",                typeof(Int32)),
                new DataColumn("Code",                      typeof(String)),
                new DataColumn("SourceData",                typeof(Int32)),
                new DataColumn("DealerID",                  typeof(String)),
                new DataColumn("Bank1DealingCode",          typeof(String)),
                new DataColumn("BrokerDealingCode",         typeof(String)),
                new DataColumn("DealType",                  typeof(Int32)),
                new DataColumn("Currency1",                 typeof(String)),
                new DataColumn("DealVolumeCurrency1",       typeof(Double)),
                new DataColumn("ValueDatePeriod1Currency1", typeof(String)),
                new DataColumn("LocalTCID",                 typeof(String)),
                new DataColumn("TradingArea",               typeof(String)),
                new DataColumn("UserDefinedData1",          typeof(String)),
                new DataColumn("UserDefinedData5",          typeof(String)),
                new DataColumn("Currency2",                 typeof(String)),
                new DataColumn("ExchangeRatePeriod1",       typeof(Double)),
                new DataColumn("RateDirection",            typeof(Int32))
                };

            // Add DataColumns to DataTable
            table.Columns.AddRange(cols);

            // Create DataRows based on data imported from CSV
            foreach (DataRow srcrow in Source.Rows)
            {
                DataRow row = table.NewRow();

                // (1)  UploadFlag 
                row["UploadFlag"] = 0;

                // (2)  Code
                //row["Code"] = 

                // (3)  SourceData 
                row["SourceData"] = 1;

                // (4)  DealerID
                row["DealerID"] = "tasaiyu1";

                // (5)  Bank1DealingCode
                //row["Bank1DealingCode"] = 

                // (6)  BrokerDealingCode 
                row["BrokerDealingCode"] = "DUMMYBR";

                // (7)  DealType
                if (srcrow["BUY_SELL_FLAG"].ToString().Contains("B"))
                {
                    row["DealType"] = 1;
                }
                else if (srcrow["BUY_SELL_FLAG"].ToString().Contains("S"))
                {
                    row["DealType"] = 2;
                }

                // (8)  Currency1
                if (srcrow["FIX_CONTRACT_EQUIVALENT_FLAG"].ToString().Contains("C"))
                {
                    row["Currency1"] = srcrow["CONTRACT_CURRENCY"];
                }
                else if (srcrow["FIX_CONTRACT_EQUIVALENT_FLAG"].ToString().Contains("E"))
                {
                    row["Currency1"] = srcrow["EQUIVALENT_CURRENCY"];
                }

                // (9)  DealVolumeCurrency1
                if (srcrow["FIX_CONTRACT_EQUIVALENT_FLAG"].ToString().Contains("C"))
                {
                    row["DealVolumeCurrency1"] = srcrow["CONTRACT_AMOUNT"];
                }
                else if (srcrow["FIX_CONTRACT_EQUIVALENT_FLAG"].ToString().Contains("E"))
                {
                    row["DealVolumeCurrency1"] = srcrow["EQUIVALENT_AMOUNT"];
                }

                // (10) ValueDatePeriod1Currency1  
                row["ValueDatePeriod1Currency1"] = srcrow["VALUE_DATE"];

                // (11) LocalTCID 
                row["LocalTCID"] = "MHCBSPO";

                // (12) TradingArea
                if (srcrow["BANK_FLAG"].ToString().Contains("Y"))
                {
                    row["TradingArea"] = "INTERBANK";
                }
                else if (srcrow["BANK_FLAG"].ToString().Contains("N"))
                {
                    row["TradingArea"] = "CUSTOMER";
                }

                // (13) UserDefinedData1
                row["UserDefinedData1"] = "C1BHAN1";

                // (14) UserDefinedData5 
                row["UserDefinedData5"] = "DUMMY";

                // (15) Currency2
                if (srcrow["FIX_CONTRACT_EQUIVALENT_FLAG"].ToString().Contains("C"))
                {
                    row["Currency2"] = srcrow["EQUIVALENT_CURRENCY"];
                }
                else if (srcrow["FIX_CONTRACT_EQUIVALENT_FLAG"].ToString().Contains("E"))
                {
                    row["Currency2"] = srcrow["CONTRACT_CURRENCY"];
                }

                // (16) ExchangeRatePeriod1 
                if (string.IsNullOrEmpty(srcrow["INTERNAL_RATE"].ToString()))
                {
                    row["ExchangeRatePeriod1"] = srcrow["EXCHANGE_RATE"];
                }
                else
                {
                    row["ExchangeRatePeriod1"] = srcrow["INTERNAL_RATE"];
                }

                // (17) RateDirection 
                string DevonPair = row["Currency1"].ToString() + row["Currency2"].ToString();

                foreach (DataRow ccyrow in CCYPair.Rows)
                {
                    // Check DevonPair follows Mkt Convention 
                    // Use CURRENCY_PAIR_1 (column number 2), CURRENCY_PAIR_2 (i.e. column number = 3) and UNIT_CURRENCY (column number = 4)
                    if (ccyrow["CURRENCY_PAIR_1"].ToString().Contains(DevonPair))
                    {
                        row["RateDirection"] = 1;
                        break;
                    }

                    else if (ccyrow["CURRENCY_PAIR_2"].ToString().Contains(DevonPair))
                    {
                        row["RateDirection"] = 2;
                        break;
                    }
                }

                // Add DataRow to DataTable
                table.Rows.Add(row);
            }

            return table;
        }

        static void SuccessLog(string FilePath, string StatusMsg)
        {
            // Stores all successful status in log file 
            string FileName = String.Format(FilePath + "Success_{0}.txt", DateTime.Today.ToString("yyyyMMdd"));
            File.AppendAllText(FileName, StatusMsg.ToString() + Environment.NewLine);
        }

        static void ErrorLog(string FilePath, string StatusMsg)
        {
            // Stores all error status in log file 
            string FileName = String.Format(FilePath + "Error_{0}.txt", DateTime.Today.ToString("yyyyMMdd"));
            File.AppendAllText(FileName, StatusMsg.ToString() + Environment.NewLine);
        }

        static void InspectData(DataTable Table) // This can be invoked if we wish to check the relevant DataTable
        {
            foreach (DataRow row in Table.Rows)
            {
                foreach (var item in row.ItemArray)
                {
                    Console.WriteLine(item);
                }
            }
        }

    }
}
